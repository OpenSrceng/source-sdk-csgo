#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	pass
 
def build(bld):
	sources = [
		File	(['Bitmap.cpp']),
		File	(['Border.cpp']),
		File	(['ScalableImageBorder.cpp']),
		File	(['ImageBorder.cpp']),
		File	(['fileimage.cpp']),
		File	(['../../public/filesystem_helpers.cpp']),
		File	(['../../public/filesystem_init.cpp']),
		File	(['htmlwindow.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['InputWin32.cpp'], lambda x: x.env.DEST_OS != 'darwin'),
		File	(['inputosx.cpp'], lambda x: x.env.DEST_OS == 'darwin'),
		File	(['MemoryBitmap.cpp']),
		File	(['MessageListener.cpp']),
		File	(['Scheme.cpp']),
		File	(['Surface.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['System.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['system_posix.cpp'], lambda x: x.env.DEST_OS != 'win32'),
		File	(['../../public/UnicodeFileHelpers.cpp']),
		File	(['vgui.cpp']),
		File	(['vgui_internal.cpp']),
		File	(['vgui_key_translation.cpp']),
		File	(['VPanel.cpp']),
		File	(['VPanelWrapper.cpp']),
		File	(['keyrepeat.cpp']),
		File	(['../../public/tier0/memoverride.cpp'])
	]

	includes = [
		'../../thirdparty/freetype/include',
#		'../../thirdparty/fontconfig'
	]

	libs = [
		'tier0',
		'tier1',
		'tier2',
		'tier3',
		'interfaces',
		'vstdlib',
		'vgui_surfacelib'
	]

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.shlib(
		target   = 'vgui2',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		install_path = bld.env.BINDIR,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
