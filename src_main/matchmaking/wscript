#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	conf.env.append_unique('DEFINES', ['NO_STEAM_GAMECOORDINATOR','MATCHMAKING_DLL'])
	if conf.env.DEST_OS == 'win32':
		conf.env.append_unique('DEFINES', ['NO_STRING_T','VECTOR','strncpy=use_Q_strncpy_instead','_snprintf=use_Q_snprintf_instead'])

def build(bld):
	sources = [
		File	(['matchmakingqos.cpp']),
		File	(['mm_events.cpp']),
		File	(['mm_extensions.cpp']),
		File	(['mm_framework.cpp']),
		File	(['mm_netmsgcontroller.cpp']),
		File	(['mm_session.cpp']),
		File	(['mm_voice.cpp']),
		File	(['ds_searcher.cpp']),
		File	(['match_searcher.cpp']),
		File	(['mm_netmgr.cpp']),
		File	(['mm_session_offline_custom.cpp']),
		File	(['mm_session_online_client.cpp']),
		File	(['mm_session_online_host.cpp']),
		File	(['mm_session_online_search.cpp']),
		File	(['mm_session_online_teamsearch.cpp']),
		File	(['sys_session.cpp']),
		File	(['steam_apihook.cpp']),
		File	(['steam_datacenterjobs.cpp']),
		File	(['steam_lobbyapi.cpp']),
		File	(['x360_xlsp_cmd.cpp']),
		File	(['datacenter.cpp']),
		File	(['mm_dlc.cpp']),
		File	(['leaderboards.cpp']),
		File	(['matchsystem.cpp']),
		File	(['player.cpp']),
		File	(['playermanager.cpp']),
		File	(['searchmanager.cpp']),
		File	(['servermanager.cpp']),
		File	(['playerrankingdata.cpp']),
		File	(['extkeyvalues.cpp']),
		File	(['../public/filesystem_helpers.cpp']),
		File	(['main.cpp'])
	]

	includes = [
		'../gcsdk/steamextra',
		'../thirdparty/protobuf-2.5.0/src'
	]

	libs = []

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.stlib(
		target   = 'matchmaking_base',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
