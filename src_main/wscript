#!/usr/bin/env python
# modified from FWGS/xash3d-fwgs

from waflib import Build, ConfigSet, Context, Logs
from waflib.Tools import waf_unit_test
import sys, os, optparse

default_prefix = '../game'

PROJECTS = [
	'tier0',
	'tier1',
	'tier2',
	'tier3',
	'interfaces',
	'vstdlib',
	'mathlib',
	'mathlib/extended',
	'launcher_main',
	'togl',
	'vphysics',
	'thirdparty/joltphysics'
]

def options(opt):
	opt.load('compiler_c compiler_cxx waf_unit_test')

	grp = opt.add_option_group('Common options')

	grp.add_option('--64bits', action = 'store_true', dest = 'PLATFORM_64BITS', default = False,
		help = 'build for 64bits platform [default: %default]')

	grp.add_option('--cfg', action = 'store', dest = 'CFG', default = 'release',
		help = 'build types [default: %default]')

	grp.add_option('--ccache', action = 'store_true', dest = 'CCACHE', default = False,
		help = 'build with ccache [default: %default]')

	grp.add_option('--strip', action = 'store_true', dest = 'STRIP', default = False,
		help = 'strip libs\' additional info [default: %default]')

	grp.add_option('--ndk', action = 'store_true', dest = 'NDK', default = False,
		help = 'build with android ndk [default: %default]')

def configure(conf):
	conf.load('compiler_c compiler_cxx')

	if conf.options.NDK:
		conf.env.DEST_OS = 'linux'

	if conf.options.CCACHE:
		conf.find_program('ccache', var='CCACHE')
	if conf.options.STRIP:
		conf.find_program('strip', var='STRIP')

	defines = ['CSTRIKE_REL_BUILD=1','RAD_TELEMETRY_DISABLED','CSTRIKE15','VERSION_SAFE_STEAM_API_INTERFACES']

	if conf.env.DEST_OS in 'linux':
		cflags = ['-fPIC','-pthread']
		cxxflags = ['-std=c++17']
		linkflags = ['-Wl,--no-undefined','-pthread','-ldl','-no-canonical-prefixes','-Wl,--no-warn-mismatch']
		defines += ['GNUC','_DLL_EXT=.so','_LINUX','LINUX','_POSIX','POSIX','GL_GLEXT_PROTOTYPES','DX_TO_GL_ABSTRACTION','USE_SDL']
		warnings = ['-Wall']
		flags = []
		march = []

		if conf.options.NDK:
			if 'NDK_PATH' in os.environ:
				ndk_path = os.environ.get('NDK_PATH')
			else:
				conf.fatal('Set NDK_PATH environment variable pointing to the root of Android NDK!')
			if conf.options.PLATFORM_64BITS:
				conf.env.DEST_CPU = 'aarch64'
				conf.env.CC    = conf.env.LINK_CC  = [ndk_path + '/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang']
				conf.env.CXX   = conf.env.LINK_CXX = [ndk_path + '/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang++']
				conf.env.AR    = [ndk_path + '/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar']
				conf.env.STRIP = [ndk_path + '/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip']
				conf.env.CC_NAME = conf.env.COMPILER_CC = 'clang'
				conf.env.COMPILER_CXX = 'clang++'
				cxxflags += ['-I' + ndk_path + '/sources/cxx-stl/llvm-libc++/include']
				linkflags += ['-lc++abi','-lc++_static']
				march += ['-march=armv8-a','-mtune=cortex-a53','-mcpu=cortex-a53']
			else:
				conf.fatal('Doesn\'t support 32-bits, use --64bits!')
			defines += ['ANDROID']
			conf.get_cc_version(conf.env.CXX, clang=True)

		if conf.env.DEST_CPU in ['arm','aarch64']:
			cflags += ['-fsigned-char']

		if conf.env.CC_NAME == 'gcc':
			warnings += ['-fdiagnostics-color=always']
			defines += ['COMPILER_GCC']
		elif conf.env.CC_NAME == 'clang':
			warnings += ['-fcolor-diagnostics']
			defines += ['COMPILER_CLANG']

		if not conf.env.CC_NAME == 'clang' and conf.options.CFG == 'asan':
			linkflags += ['-Wl,--unresolved-symbols=ignore-all']
		if conf.env.CC_NAME == 'clang':
			flags += ['-stdlib=libstdc++']

		if conf.options.CFG == 'debug':
			cflags += ['-O0','-g3']
			cxxflags += ['-O0','-g3']
			defines += ['DEBUG=1','_DEBUG=1']
		elif conf.options.CFG == 'release':
			cflags += ['-O3']
			cxxflags += ['-O3']
		elif conf.options.CFG == 'asan':
			cflags += ['-O0','-g','-fsanitize=address']
			cxxflags += ['-O0','-g','-fsanitize=address']
			linkflags += ['-fsanitize=address']
		else:
			conf.fatal('cfg not found')

		if conf.options.CFG != 'debug':
			defines += ['NDEBUG=1']

		if conf.options.PLATFORM_64BITS:
			if conf.env.DEST_CPU == 'x86_64':
				march += ['-march=nocona','-mtune=core2','-mfpmath=sse']
			defines += ['PLATFORM_64BITS']
		elif conf.env.DEST_CPU in ['x86','x86_64'] and not conf.options.PLATFORM_64BITS:
			march += ['-m32','-march=prescott','-mtune=core2','-mfpmath=sse']

		conf.env.append_unique('CFLAGS', march + cflags + warnings)
		conf.env.append_unique('CXXFLAGS', march + cflags + cxxflags + warnings + flags)
		conf.env.append_unique('LINKFLAGS', march + linkflags + flags)
		conf.env.append_unique('DEFINES', defines)

	includes = [
		os.path.abspath('common'),
		os.path.abspath('public'),
		os.path.abspath('public/tier0'),
		os.path.abspath('public/tier1'),
		os.path.abspath('thirdparty/SDL2')
	]
	conf.env.append_unique('INCLUDES', includes)

	if conf.options.CCACHE:
		conf.env.CC = conf.env.CCACHE + conf.env.CC
		conf.env.CXX = conf.env.CCACHE + conf.env.CXX

	conf.check_cc(cflags=cflags, linkflags=linkflags, msg='Checking for required C flags')
	conf.check_cxx(cxxflags=cxxflags, linkflags=linkflags, msg='Checking for required C++ flags')

	store_path = os.path.join(conf.bldnode.abspath(), 'options.py')
	store_data = ConfigSet.ConfigSet()
	options = vars(conf.options)
	store_data['OPTIONS'] = vars(conf.options)
	store_data.store(store_path)

	for name in PROJECTS:	
		depth_push(name)
		saveenv = conf.env
		conf.setenv(name, conf.env)
		conf.env.ENVNAME = name
		conf.recurse(name)
		conf.setenv('')
		conf.env = saveenv
		depth_pop()

DEPTH = ''
def depth_push(path):
	global DEPTH
	DEPTH = os.path.join(DEPTH, path)
def depth_pop():
	global DEPTH
	DEPTH = os.path.dirname(DEPTH)

# modified from waf/playground/strip/strip_on_install.py
def copy_fun(self, src, tgt):
	inst_copy_fun(self, src, tgt)
	if self.generator.bld.options.STRIP and getattr(self.generator, 'link_task', None) and self.generator.link_task.outputs[0] in self.inputs:
		self.generator.bld.cmd_and_log(self.generator.bld.env.STRIP + [tgt], quiet=Context.BOTH)
inst_copy_fun = Build.inst.copy_fun
Build.inst.copy_fun = copy_fun

def build(bld):
	store_path = os.path.join(bld.bldnode.abspath(), 'options.py')
	store_data = ConfigSet.ConfigSet()
	options = vars(bld.options)
	store_data.load(store_path)
	for o in options:
		if options[o]: store_data['OPTIONS'][o] = options[o]
	bld.options = optparse.Values(store_data['OPTIONS'])
	bld.load_envs()
	for name in PROJECTS:
		saveenv = bld.env
		bld.env = bld.all_envs[name]
		bld.recurse(name)
		bld.env = saveenv
