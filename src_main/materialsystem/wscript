#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	conf.env.append_unique('DEFINES', ['DEFINE_MATERIALSYSTEM_INTERFACE;','MATERIALSYSTEM_EXPORTS','SHADERAPIDX9','SHADER_DLL_EXPORT','FAST_MATERIALVAR_ACCESS','STDSHADER_DX9_DLL_EXPORT'])
	if conf.env.DEST_OS == 'win32':
		conf.env.append_unique('DEFINES', ['strncpy=use_Q_strncpy_instead','_snprintf=use_Q_snprintf_instead'])
 
def build(bld):
	sources = [
		File	(['CColorCorrection.cpp']),
		File	(['cmaterial.cpp']),
		File	(['cmaterial_queuefriendly.cpp']),
		File	(['CMaterialSubRect.cpp']),
		File	(['cmaterialvar.cpp']),
		File	(['cmatnullrendercontext.cpp']),
		File	(['colorspace.cpp']),
		File	(['ctexture.cpp']),
		File	(['../public/filesystem_helpers.cpp']),
		File	(['imagepacker.cpp']),
		File	(['mat_stub.cpp']),
		File	(['materialsystem_global.cpp']),
		File	(['morph.cpp']),
		File	(['SubdMgr.cpp']),
		File	(['occlusionquerymgr.cpp']),
		File	(['shadersystem.cpp']),
		File	(['texturemanager.cpp']),
		File	(['composite_texture.cpp']),
		File	(['custom_material.cpp']),
		File	(['base_visuals_data_processor.cpp']),
		File	(['pch_materialsystem.cpp']),
		File	(['cmaterialdict.cpp']),
		File	(['cmaterialsystem.cpp']),
		File	(['cmatlightmaps.cpp']),
		File	(['cmatpaintmaps.cpp']),
		File	(['cmatrendercontext.cpp']),
		File	(['cmatqueuedrendercontext.cpp']),
		File	(['shaderapidx9/colorformatdx8.cpp']),
		File	(['shaderapidx9/d3d_async.cpp']),								
		File	(['shaderapidx9/hardwareconfig.cpp']),
		File	(['shaderapidx9/meshbase.cpp']),
		File	(['shaderapidx9/meshdx8.cpp']),
		File	(['shaderapidx9/recording.cpp'], lambda x: x.env.DEST_OS == 'win32' and not x.options.TOGL),
		File	(['shaderapidx9/shaderapidx8.cpp']),
		File	(['shaderapidx9/shaderdevicebase.cpp']),
		File	(['shaderapidx9/shaderapibase.cpp']),
		File	(['shaderapidx9/shaderdevicedx8.cpp']),
		File	(['shaderapidx9/shadershadowdx8.cpp']),
		File	(['shaderapidx9/texturedx8.cpp']),
		File	(['shaderapidx9/TransitionTable.cpp']),
		File	(['shaderapidx9/cvballoctracker.cpp']),
		File	(['shaderapidx9/vertexdecl.cpp']),
		File	(['shaderapidx9/vertexshaderdx8.cpp']),
		File	(['shaderapidx9/wmi.cpp'], lambda x: x.env.DEST_OS == 'win32' and not x.options.TOGL),
		File	(['shaderapidx9/winutils.cpp'], lambda x: x.env.DEST_OS != 'win32'),
		File	(['shaderlib/BaseShader.cpp']),
		File	(['shaderlib/ShaderDLL.cpp']),
		File	(['shaderlib/shaderlib_cvar.cpp']),
		File	(['stdshaders/aftershock.cpp']),
		File	(['stdshaders/aftershock_helper.cpp']),
		File	(['stdshaders/AccumBuff4Sample.cpp']),
		File	(['stdshaders/accumbuff5sample.cpp']),
		File	(['stdshaders/BaseVSShader.cpp']),
		File	(['stdshaders/bik_dx90.cpp']),
		File	(['stdshaders/black.cpp']),							
		File	(['stdshaders/Blob_dx9.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/Blob_helper.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/Bloom.cpp']),
		File	(['stdshaders/BlurFilterX.cpp']),
		File	(['stdshaders/BlurFilterY.cpp']),
		File	(['stdshaders/BufferClearObeyStencil_dx9.cpp']),
		File	(['stdshaders/cable_dx9.cpp']),
		File	(['stdshaders/character_ssao.cpp']),
		File	(['stdshaders/character.cpp']),
		File	(['stdshaders/cloak.cpp']),
		File	(['stdshaders/cloak_blended_pass_helper.cpp']),
		File	(['stdshaders/cloak_dx9_helper.cpp']),
		File	(['stdshaders/colorcorrection.cpp']),
		File	(['stdshaders/colorout.cpp']),
		File	(['stdshaders/cs_grass.cpp']),
		File	(['stdshaders/customclothing.cpp']),
		File	(['stdshaders/customweapon_dx9.cpp']),
		File	(['stdshaders/customweapon_dx9_helper.cpp']),
		File	(['stdshaders/customcharacter.cpp']),
		File	(['stdshaders/debugmrttexture.cpp']),
		File	(['stdshaders/debugmorphaccumulator_dx9.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/DebugTextureView.cpp']),
		File	(['stdshaders/DecalModulate_dx9.cpp']),
		File	(['stdshaders/DepthOfField_dx9.cpp']),
		File	(['stdshaders/depthwrite.cpp']),
		File	(['stdshaders/Downsample.cpp']),
		File	(['stdshaders/downsample_nohdr.cpp']),
		File	(['stdshaders/Engine_Post_dx9.cpp']),
		File	(['stdshaders/embroider.cpp']),
		File	(['stdshaders/emissive_scroll_blended_pass_helper.cpp']),
		File	(['stdshaders/eye_refract.cpp']),
		File	(['stdshaders/eye_refract_helper.cpp']),
		File	(['stdshaders/eyes_dx8_dx9_helper.cpp']),
		File	(['stdshaders/eyes_dx9.cpp']),
		File	(['stdshaders/eyeglint_dx9.cpp']),
		File	(['stdshaders/flesh_interior_blended_pass_helper.cpp']),
		File	(['stdshaders/floatcombine.cpp']),
		File	(['stdshaders/floatcombine_autoexpose.cpp']),
		File	(['stdshaders/floattoscreen.cpp']),
		File	(['stdshaders/floattoscreen_vanilla.cpp']),
		File	(['stdshaders/gamecontrols.cpp']),
		File	(['stdshaders/HDRCombineTo16Bit.cpp']),
		File	(['stdshaders/HDRSelectRange.cpp']),
		File	(['stdshaders/hsl_filmgrain_pass1.cpp']),
		File	(['stdshaders/hsl_filmgrain_pass2.cpp']),
		File	(['stdshaders/filmgrain.cpp']),
		File	(['stdshaders/filmdust.cpp']),
		File	(['stdshaders/hsv.cpp']),
		File	(['stdshaders/IceSurface_dx9.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/IceSurface_helper.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/introscreenspaceeffect.cpp']),
		File	(['stdshaders/lightmappedgeneric_dx9.cpp']),
		File	(['stdshaders/lightmappedgeneric_dx9_helper.cpp']),
		File	(['stdshaders/lightmappedpaint_dx9_helper.cpp']),
		File	(['stdshaders/lightmappedreflective.cpp']),
		File	(['stdshaders/lightmapped_4wayblend.cpp']),
		File	(['stdshaders/lightmapped_4wayblend_dx9_helper.cpp']),
		File	(['stdshaders/lightshafts.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/lightshafts_helper.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/modulate_dx9.cpp']),
		File	(['stdshaders/MonitorScreen_dx9.cpp']),
		File	(['stdshaders/morphaccumulate_dx9.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/morphweight_dx9.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/motion_blur_dx9.cpp']),
		File	(['stdshaders/object_motion_blur_dx9.cpp']),
		File	(['stdshaders/multiblend.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/multiblend_dx9_helper.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/occlusion_dx9.cpp']),
		File	(['stdshaders/paintblob_dx9.cpp']),
		File	(['stdshaders/paintblob_helper.cpp']),
		File	(['stdshaders/parallaxtest.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/particlelitgeneric_dx9.cpp']),
		File	(['stdshaders/particlelitgeneric_dx9_helper.cpp']),
		File	(['stdshaders/particlesphere_dx9.cpp']),
		File	(['stdshaders/portal.cpp']),
		File	(['stdshaders/portalstaticoverlay.cpp']),
		File	(['stdshaders/portal_refract.cpp']),
		File	(['stdshaders/portal_refract_helper.cpp']),
		File	(['stdshaders/projected.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/projected_dx9_helper.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/proto_ice.cpp']),
		File	(['stdshaders/proto_ice_helper.cpp']),
		File	(['stdshaders/prototype.cpp']),
		File	(['stdshaders/prototype_helper.cpp']),
		File	(['stdshaders/refract.cpp']),
		File	(['stdshaders/refract_dx9_helper.cpp']),
		File	(['stdshaders/sample4x4.cpp']),
		File	(['stdshaders/sample4x4_blend.cpp']),
		File	(['stdshaders/screenspace_general.cpp']),
		File	(['stdshaders/sfm_blurfilterx.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_blurfiltery.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_shape.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_downsample.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_integercombine.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_ambientocclusion.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/sfm_ao_blur.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['stdshaders/shadow.cpp']),
		File	(['stdshaders/shadowbuild_dx9.cpp']),
		File	(['stdshaders/shadowmodel_dx9.cpp']),
		File	(['stdshaders/shatteredglass.cpp']),
		File	(['stdshaders/showz.cpp']),
		File	(['stdshaders/solidenergy_dx9.cpp']),
		File	(['stdshaders/solidenergy_dx9_helper.cpp']),
		File	(['stdshaders/phong_dx9_helper.cpp']),
		File	(['stdshaders/sky_hdr_dx9.cpp']),
		File	(['stdshaders/splinerope.cpp']),
		File	(['stdshaders/sprite_dx9.cpp']),
		File	(['stdshaders/spritecard.cpp']),
		File	(['stdshaders/teeth.cpp']),
		File	(['stdshaders/TreeLeaf.cpp']),
		File	(['stdshaders/unlitgeneric_dx9.cpp']),
		File	(['stdshaders/unlitworld_screensample.cpp']),
		File	(['stdshaders/unlittwotexture_dx9.cpp']),
		File	(['stdshaders/vertexlitgeneric_dx9.cpp']),
		File	(['stdshaders/vertexlitgeneric_dx9_helper.cpp']),
		File	(['stdshaders/volume_clouds.cpp']),
		File	(['stdshaders/volume_clouds_helper.cpp']),
		File	(['stdshaders/vortwarp_dx9.cpp']),
		File	(['stdshaders/water.cpp']),
		File	(['stdshaders/weapondecal_dx9.cpp']),
		File	(['stdshaders/weapondecal_dx9_helper.cpp']),
		File	(['stdshaders/windowimposter_dx90.cpp']),
		File	(['stdshaders/wireframe_dx9.cpp']),
		File	(['stdshaders/worldimposter.cpp']),							
		File	(['stdshaders/worldtwotextureblend.cpp']),
		File	(['stdshaders/worldvertextransition.cpp']),
		File	(['stdshaders/worldvertextransition_dx8_helper.cpp']),
		File	(['stdshaders/writez_dx9.cpp']),
		File	(['stdshaders/writestencil_dx9.cpp']),
		File	(['../public/tier0/memoverride.cpp'])
	]

	includes = [
		'.',
		'shaderapidx9',
		'shaderlib',
		'stdshaders',
		'stdshaders/fxctmp9',
		'stdshaders/vshtmp9'
	]

	libs = [
		'tier0',
		'tier1',
		'tier2',
		'tier3',
		'interfaces',
		'vstdlib',
		'bitmap',
		'mathlib',
		'shaderlib',
		'vtf',
		'videocfg'
	]

	if bld.options.TOGL:
		libs += [
			'togl'
		]

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.shlib(
		target   = 'materialsystem',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		install_path = bld.env.BINDIR,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
