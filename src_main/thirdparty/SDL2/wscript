#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	pass
 
def build(bld):
	if not bld.options.NDK:
		return # TODO: support more platform

	sources = [
		File	(bld.path.ant_glob(['src/*.c'])),
		File	(bld.path.ant_glob(['src/audio/*.c'])),
		File	(bld.path.ant_glob(['src/audio/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/audio/dummy/*.c'])),
		File	(['src/atomic/SDL_atomic.c']),
		File	(['src/atomic/SDL_spinlock.c']),
		File	(bld.path.ant_glob(['src/core/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/cpuinfo/*.c'])),
		File	(bld.path.ant_glob(['src/dynapi/*.c'])),
		File	(bld.path.ant_glob(['src/events/*.c'])),
		File	(bld.path.ant_glob(['src/file/*.c'])),
		File	(bld.path.ant_glob(['src/haptic/*.c'])),
		File	(bld.path.ant_glob(['src/haptic/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/joystick/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/joystick/android/*.c']), lambda x: x.options.NDK),
		File	(['src/joystick/steam/SDL_steamcontroller.c']),
		File	(bld.path.ant_glob(['src/loadso/dlopen/*.c']), lambda x: x.env.DEST_OS != 'win32'),
		File	(bld.path.ant_glob(['src/power/*.c'])),
		File	(bld.path.ant_glob(['src/power/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/filesystem/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/render/*.c'])),
		File	(bld.path.ant_glob(['src/render/*/*.c'])),
		File	(bld.path.ant_glob(['src/stdlib/*.c'])),
		File	(bld.path.ant_glob(['src/thread/*.c'])),
		File	(bld.path.ant_glob(['src/thread/pthread/*.c']), lambda x: x.env.DEST_OS != 'win32'),
		File	(bld.path.ant_glob(['src/timer/*.c'])),
		File	(bld.path.ant_glob(['src/timer/unix/*.c']), lambda x: x.env.DEST_OS != 'win32'),
		File	(bld.path.ant_glob(['src/video/*.c'])),
		File	(bld.path.ant_glob(['src/video/android/*.c']), lambda x: x.options.NDK),
		File	(bld.path.ant_glob(['src/video/yuv2rgb/*.c'])),
		File	(bld.path.ant_glob(['src/test/*.c']))
	]

	includes = []

	libs = []

	if bld.options.NDK:
		libs += [
			'ANDROID',
			'LOG',
			'GLESV1_CM',
			'GLESV2'
		]

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.shlib(
		target   = 'SDL2',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		install_path = bld.env.BINDIR,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
