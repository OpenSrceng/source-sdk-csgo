#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	pass

def build(bld):
	sources = [
		File	(['src/google/protobuf/descriptor_database.cc']),
		File	(['src/google/protobuf/descriptor.cc']),
		File	(['src/google/protobuf/descriptor.pb.cc']),
		File	(['src/google/protobuf/dynamic_message.cc']),
		File	(['src/google/protobuf/extension_set_heavy.cc']),
		File	(['src/google/protobuf/extension_set.cc']),
		File	(['src/google/protobuf/generated_message_reflection.cc']),
		File	(['src/google/protobuf/generated_message_util.cc']),
		File	(['src/google/protobuf/io/coded_stream.cc']),
		File	(['src/google/protobuf/io/gzip_stream.cc']),
		File	(['src/google/protobuf/io/printer.cc']),
		File	(['src/google/protobuf/io/tokenizer.cc']),
		File	(['src/google/protobuf/io/zero_copy_stream_impl_lite.cc']),
		File	(['src/google/protobuf/io/zero_copy_stream_impl.cc']),
		File	(['src/google/protobuf/io/zero_copy_stream.cc']),
		File	(['src/google/protobuf/message_lite.cc']),
		File	(['src/google/protobuf/message.cc']),
		File	(['src/google/protobuf/reflection_ops.cc']),
		File	(['src/google/protobuf/repeated_field.cc']),
		File	(['src/google/protobuf/stubs/common.cc']),
		File	(['src/google/protobuf/stubs/once.cc']),
		File	(['src/google/protobuf/stubs/stringprintf.cc']),
		File	(['src/google/protobuf/stubs/structurally_valid.cc']),
		File	(['src/google/protobuf/stubs/strutil.cc']),
		File	(['src/google/protobuf/stubs/substitute.cc']),
		File	(['src/google/protobuf/text_format.cc']),
		File	(['src/google/protobuf/unknown_field_set.cc']),
		File	(['src/google/protobuf/wire_format_lite.cc']),
		File	(['src/google/protobuf/wire_format.cc']),
		File	(['src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc'], lambda x: x.env.DEST_CPU in ['x86','x86_64'])
	]

	includes = [
		'.',
		'src'
	]

	libs = []

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.stlib(
		target   = 'protobuf',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
