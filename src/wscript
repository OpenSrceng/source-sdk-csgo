#!/usr/bin/env python
# modified from FWGS/xash3d-fwgs

from waflib import Build, Context, Logs
from waflib.Tools import waf_unit_test
import sys, os

default_prefix = '../game'

PROJECTS = [
	'tier0'
]

def options(opt):
	opt.load('compiler_c compiler_cxx waf_unit_test')

	grp = opt.add_option_group('Common options')

	grp.add_option('--64bits', action = 'store_true', dest = 'PLATFORM_64BITS', default = False,
		help = 'build for 64bits platform [default: %default]')

	grp.add_option('--cfg', action = 'store', dest = 'CFG', default = 'release',
		help = 'build type [default: %default]')

	grp.add_option('--strip', action = 'store_true', dest = 'STRIP', default = False,
		help = 'strip libs\' additional info [default: %default]')

	opt.recurse(PROJECTS)

def configure(conf):
	conf.load('compiler_c compiler_cxx')

	conf.find_program('ccache', var='CCACHE')
	conf.find_program('strip', var='STRIP')

	defines = ['CSTRIKE_REL_BUILD=1','RAD_TELEMETRY_DISABLED','CSTRIKE15','VERSION_SAFE_STEAM_API_INTERFACES']

	if conf.env.DEST_OS in ['linux','android']:
		cflags = ['-fPIC','-std=c11','-pthread']
		cxxflags = ['-fPIC','-std=c++11','-pthread']
		linkflags = ['-pthread']
		defines += ['GNUC','_DLL_EXT=.so','_LINUX','LINUX','_POSIX','POSIX','GL_GLEXT_PROTOTYPES','DX_TO_GL_ABSTRACTION','USE_SDL']
		warnings = ['-Wall']

		if conf.env.CC_NAME == 'gcc':
			warnings += ['-fdiagnostics-color=always']
			defines += ['COMPILER_GCC']
		elif conf.env.CC_NAME == 'clang':
			warnings += ['-fcolor-diagnostics']
			defines += ['COMPILER_CLANG']
		
		if not conf.env.CC_NAME == 'clang' and not conf.options.CFG == 'asan':
			linkflags += ['-Wl,--no-undefined']

		if conf.options.CFG == 'debug':
			cflags += ['-O0','-g3']
			cxxflags += ['-O0','-g3']
			defines += ['DEBUG=1','_DEBUG=1']
		elif conf.options.CFG == 'release':
			cflags += ['-O3']
			cxxflags += ['-O3']
		elif conf.options.CFG == 'asan':
			cflags += ['-O1','-g','-fsanitize=address']
			cxxflags += ['-O1','-g','-fsanitize=address']
			linkflags += ['-fsanitize=address']
		else:
			conf.fatal('cfg not found')

		if conf.options.CFG != 'debug':
			defines += ['NDEBUG=1','_NDEBUG=1']

		if conf.env.DEST_CPU == 'x86_64' and conf.options.PLATFORM_64BITS:
			march = ['-march=nocona','-mtune=core2','-mfpmath=sse']
			defines += ['PLATFORM_64BITS']
		elif conf.env.DEST_CPU == 'x86' or not conf.options.PLATFORM_64BITS:
			march = ['-m32','-march=prescott','-mtune=core2','-mfpmath=sse']

		conf.env.append_unique('CFLAGS', march + cflags + warnings)
		conf.env.append_unique('CXXFLAGS', march + cxxflags + warnings)
		conf.env.append_unique('LINKFLAGS', march + linkflags)
		conf.env.append_unique('DEFINES', defines)

		# always use ccache
		conf.env.CC = conf.env.CCACHE + conf.env.CC
		conf.env.CXX = conf.env.CCACHE + conf.env.CXX

	conf.check_cc(cflags=cflags, linkflags=linkflags, msg='Checking for required C flags')
	conf.check_cxx(cxxflags=cxxflags, linkflags=linkflags, msg='Checking for required C++ flags')

	conf.recurse(PROJECTS)

# modified from waf/playground/strip/strip_on_install.py
def copy_fun(self, src, tgt):
	inst_copy_fun(self, src, tgt)
	if self.generator.bld.options.STRIP and getattr(self.generator, 'link_task', None) and self.generator.link_task.outputs[0] in self.inputs:
		self.generator.bld.cmd_and_log(self.generator.bld.env.STRIP + [tgt], quiet=Context.BOTH)
inst_copy_fun = Build.inst.copy_fun
Build.inst.copy_fun = copy_fun

def build(bld):
	bld.recurse(PROJECTS)
