#! /usr/bin/env python

class File:
	def __init__(self, name, fnFilter = None):
		self.name = name
		self.fnFilter = fnFilter
	def is_enabled(self, ctx):
		if self.fnFilter:
			return self.fnFilter(ctx)
		return True

def options(opt):
	pass

def configure(conf):
	conf.env.append_unique('DEFINES', ['TIER1_STATIC_LIB'])

def build(bld):
	sources = [
		File	(['appinstance.cpp']),
		File	(['bitbuf.cpp']),
		File	(['newbitbuf.cpp']),
		File	(['byteswap.cpp']),
		File	(['characterset.cpp']),
		File	(['checksum_crc.cpp']),
		File	(['checksum_md5.cpp']),
		File	(['checksum_sha1.cpp']),
		File	(['circularbuffer.cpp']),
		File	(['commandbuffer.cpp']),
		File	(['convar.cpp']),
		File	(['datamanager.cpp']),
		File	(['diff.cpp']),
		File	(['exprevaluator.cpp']),
		File	(['generichash.cpp']),
		File	(['interface.cpp']),
		File	(['keyvalues.cpp']),
		File	(['keyvaluesjson.cpp']),
		File	(['kvpacker.cpp']),
		File	(['lzmaDecoder.cpp']),
		File	(['lzss.cpp']),
		File	(['mempool.cpp']),
		File	(['memstack.cpp']),
		File	(['NetAdr.cpp']),
		File	(['splitstring.cpp']),
		File	(['processor_detect.cpp'], lambda x: x.env.DEST_OS == 'win32'),
		File	(['processor_detect_linux.cpp'], lambda x: x.env.DEST_OS != 'win32'),
		File	(['qsort_s.cpp'], lambda x: x.env.DEST_OS in 'linux'),
		File	(['rangecheckedvar.cpp']),
		File	(['stringpool.cpp']),
		File	(['strtools.cpp']),
		File	(['strtools_unicode.cpp']),
		File	(['tier1.cpp']),
		File	(['tier1_logging.cpp']),
		File	(['timeutils.cpp']),
		File	(['uniqueid.cpp']),
		File	(['utlbuffer.cpp']),
		File	(['utlbufferutil.cpp']),
		File	(['utlsoacontainer.cpp']),
		File	(['utlstring.cpp']),
		File	(['utlstringtoken.cpp']),
		File	(['utlsymbol.cpp']),
		File	(['miniprofiler_hash.cpp']),
		File	(['sparsematrix.cpp']),
		File	(['memoverride_dummy.cpp']),
		File	(['../utils/lzma/C/LzmaDec.c'])
	]

	includes = []

	libs = []

	sources_platform = []
	for i in sources:
		if not i.is_enabled(bld):
			continue
		sources_platform += i.name

	bld.stlib(
		target   = 'tier1',
		features = 'c cxx',
		source   = sources_platform,
		includes = includes,
		use      = libs,
		subsystem = bld.env.MSVC_SUBSYSTEM
	)
